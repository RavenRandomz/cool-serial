#include <gtest/gtest.h>

#include "cool_serial/header_section.hpp"

namespace coolSerial
{
    // This checks if an instance of HeaderData can be recovered from the serlialized form
    // generated by HeaderSection
    TEST(header, serialShenanigans)
    {
        // Create test data
        constexpr DataInfo expectedInfo
        {
            .dataLength = 10,
            .dataType = 1
        };

        Bytes serializedInfo{cista::serialize(expectedInfo)};

        const uint8_t expectedInfoCrc 
        {
            CRC8::CRC8::calc(&serializedInfo[0], serializedInfo.size())
        };


        const HeaderData expected
        {
            .dataInfo = expectedInfo,
            .dataInfoCrc = expectedInfoCrc
        };

        const HeaderSection inputHeader{expectedInfo};

        Bytes expectedSerialized{cista::serialize(expected)};

        Bytes testBytes{inputHeader.getSerialized()};

        //for(auto& byte : testBytes)
        //{
        //    std::cout << std::hex << int(byte);
        //    std::cout << ", ";
        //}

        //std::cout << '\n';

        //for(auto& byte : expectedSerialized)
        //{
        //    std::cout << std::hex << int(byte);
        //    std::cout << ", ";
        //}


        // Attempt to deserialize inputHeader
        auto recoveredHeaderDataPtr
        {
            cista::deserialize<HeaderData>(inputHeader.getSerialized())
        };


        // Check for match
        //EXPECT_EQ(expected.dataInfo.dataLength, recoveredHeaderDataPtr->dataInfo.dataLength);
        //EXPECT_EQ(expected.dataInfo.dataType, recoveredHeaderDataPtr->dataInfo.dataType);
        //EXPECT_EQ(expected.dataInfoCrc, recoveredHeaderDataPtr->dataInfoCrc);
    }
}


